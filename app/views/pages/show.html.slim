/- Pdf.find_each do |pdf_data|
/  - file_path = Rails.root.join('public', 'pdf', File.basename(pdf_data.download_link))
/  - text_analysis1 = PDF::Inspector::Text.analyze(Rails.root.join('public', 'pdf', file_path ))
/  = text_analysis1.strings[0]
/  br
/  = text_analysis1.strings[2]
/  hr
/br
- @text_analysis.pages.each_with_index do|page, pindex|
  p -------------------------
  = vs_array = page[:strings].each_index.select{|i| page[:strings][i].match(/VS\./)}
  = vs_array.count
  - satty_array = []
  - ssatty_array = []
  br
  - vs_array.each_with_index do |vs, vindex|
    - satty_array << page[:strings][vs + 1].match(/ATTY:*.+/).to_s.gsub(/ATTY:/, '')
    - ssatty_array[vindex] = []
    - n = vs + 2
    - loop do
      /= 'Page String: ' + page[:strings][n].to_s
      - break if page[:strings][n].gsub(/\s+/m, " ").strip.to_s == '' or page[:strings][n].nil? or page[:strings][n].match(/OTN:*./)
      - ssatty_array[vindex] << page[:strings][vs + 2] unless page[:strings][vs + 2].match(/AKA */)
      - n += 1
      br
  br
  = page[:strings].join(" ").split(/-------*/).count
  - vs_skip = 0
  p -------------------------
  - page[:strings].join(" ").split(/-------*/).each_with_index do|dot_block, index1|
    - vs_match = dot_block.scan(/VS\./)[0].to_s
    - if vs_match.nil?
      - vs_match = ''
    - else
      - vs_match = vs_match.gsub(/\s+/m, " ").strip
    - if vs_match == ''
      - vs_skip += 1
    br
    - if index1 == 0
      = 'Title: ' + title = page[:strings][0].gsub(/\s+/m, " ").strip
      br
      - court_date_array = page[:strings][2].gsub(/\s+/m, '  ').strip.split("  ")
      = 'Court Date: ' + court_date = court_date_array[court_date_array.count - 3].to_s + ' ' + court_date_array[court_date_array.count-2].to_s + ' ' + court_date_array[court_date_array.count-1].to_s
      br
      - court_time1 = dot_block.scan(/^2[0-3]|[01][0-9]:?[0-5][0-9]\s[AP]M/)[0].to_s
      = 'Court Time: ' + court_time = court_time1 unless court_time1 == ''
      br
    /- lines = dot_block.scan(/^.+/)
    - wrong_sort = 0
    - defendant_name = nil
    /- lines.each_with_index do |line, index|
    /- line = line.to_s.strip

    /- wrong_sort = index.to_i if line.to_s.=~ /VS.+ATTY:/
    /= defendant_name = line[/(.*?)ATTY:/m, 1] if wrong_sort != 0 && wrong_sort + 1 == index

    /- court_time1 = dot_block.scan(/^2[0-3]|[01][0-9]:?[0-5][0-9]\s[AP]M/)[0].to_s
    /- court_time = court_time1 unless court_time1 == ''
    - atty_tmp = dot_block[/ATTY:(.*?)OTN:/m, 1].to_s
    - atty_tmp = dot_block[/ATTY:(.*)/m, 1] if atty_tmp == '' && dot_block.scan(/ATTY:*.+/)[1] != 'ATTY:'

    - if !atty_tmp.nil? && atty_tmp.split('ATTY:')[1].nil?
      - atty_tmp = dot_block.scan(/ATTY:*.+/)[1]
      - atty = atty_tmp.gsub(/ATTY:/, '') unless atty_tmp.nil?
    - else
      - atty = atty_tmp.split('ATTY:')[1].gsub(/\s+/m, " ").strip unless atty_tmp.nil?

    - if !atty.nil? and atty.match(/MB - FAIL TO OBTAIN A BUSINESS LICENSE/)
      - atty = ''
    = 'Atty: ' +  atty = atty_tmp.split('ATTY:')[1].gsub(/\s+/m, " ").strip unless atty_tmp.nil? || atty_tmp == ""
    br
    - if vs_match != ''
      = 'Test Atty: ' + satty_array[index1 - vs_skip].to_s

    br
    - unless ssatty_array[index1].nil?
      - ssatty_array[index1].each do |ssa|
        = 'Second Atty: ' + ssa.gsub(/ATTY:/, '').to_s unless ssa.nil?
        br
    = defendant_name = dot_block[/VS.(.*?)ATTY:/m, 1].to_s if defendant_name.nil?
    hr
    /- atty_tmp = dot_block[/ATTY:(.*)/m, 1] if atty_tmp == '' && dot_block.scan(/ATTY:*.+/)[1] != 'ATTY:'
    /
    /- atty = ''
    /= atty = atty_tmp.split('ATTY:')[1].gsub(/\s+/m, " ").strip unless atty_tmp.nil?